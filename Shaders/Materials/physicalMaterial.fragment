#version 450
#extension GL_GOOGLE_include_directive : enable

#include "../Chunks/shadowShading.glsl"
#include "../Chunks/tonemapping.glsl"

layout(set = 0, binding = 1) uniform sampler2D texSampler;
layout(set = 0, binding = 2) uniform sampler2D shadowMap;
layout(set = 0, binding = 3) uniform sampler2D brdflutSampler;
layout(set = 0, binding = 4) uniform samplerCube irradianceSampler;
layout(set = 0, binding = 5) uniform samplerCube filteredEnvSampler;
layout(set = 0, binding = 6) uniform sampler2D normalSampler;

layout(location = 0) in vec3 fragColor;
layout(location = 1) in vec2 fragTexCoord;
layout(location = 2) in vec3 fragPosition;
layout(location = 3) in vec3 fragNormal;

layout(location = 4) in vec3 fragViewPosition;

layout(location = 5) in vec3 fragPointLightPosition;
layout(location = 6) in vec3 fragPointLightColor;
layout(location = 7) in float fragPointLightStrength;

layout(location = 8) in vec3 fragDirLightDirection;
layout(location = 9) in vec3 fragDirLightColor;
layout(location = 10) in float fragDirLightStrength;

layout(location = 11) in float fragMetallic;
layout(location = 12) in float fragRoughness;

layout(location = 13) in vec4 fragShadowCoord;

layout(location = 0) out vec4 outColor;

// calculate directional light
vec3 calDirLight(vec3 color)
{
	return vec3(0,0,0);
}

// calculate point light
vec3 calPointLight(vec3 color)
{
	return vec3(0,0,0);
}

// Normal Distribution function --------------------------------------
float D_GGX(float dotNH, float roughness)
{
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;
	float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
	return (alpha2)/(PI * denom*denom); 
}

// Geometric Shadowing function --------------------------------------
float G_SchlicksmithGGX(float dotNL, float dotNV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;
	float GL = dotNL / (dotNL * (1.0 - k) + k);
	float GV = dotNV / (dotNV * (1.0 - k) + k);
	return GL * GV;
}

// Fresnel function ----------------------------------------------------
vec3 F_Schlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
vec3 F_SchlickR(float cosTheta, vec3 F0, float roughness)
{
	return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 prefilteredReflection(vec3 R, float roughness)
{
	const float MAX_REFLECTION_LOD = 10.0; // todo: param/const
	float lod = roughness * MAX_REFLECTION_LOD;
	float lodf = floor(lod);
	float lodc = ceil(lod);
	vec3 a = textureLod(filteredEnvSampler, R, lodf).rgb;
	vec3 b = textureLod(filteredEnvSampler, R, lodc).rgb;
	return mix(a, b, lod - lodf);
}

vec3 specularContribution(vec3 L, vec3 V, vec3 N, vec3 F0, float metallic, float roughness, vec3 albedo)
{
	// Precalculate vectors and dot products	
	vec3 H = normalize (V + L);
	float dotNH = clamp(dot(N, H), 0.0, 1.0);
	float dotNV = clamp(dot(N, V), 0.0, 1.0);
	float dotNL = clamp(dot(N, L), 0.0, 1.0);

	// Light color fixed
	vec3 lightColor = vec3(1.0);

	vec3 color = vec3(0.0);

	if (dotNL > 0.0) {
		// D = Normal distribution (Distribution of the microfacets)
		float D = D_GGX(dotNH, roughness); 
		// G = Geometric shadowing term (Microfacets shadowing)
		float G = G_SchlicksmithGGX(dotNL, dotNV, roughness);
		// F = Fresnel factor (Reflectance depending on angle of incidence)
		vec3 F = F_Schlick(dotNV, F0);		
		vec3 spec = D * F * G / (4.0 * dotNL * dotNV + 0.001);		
		vec3 kD = (vec3(1.0) - F) * (1.0 - metallic);			
		color += (kD * albedo / PI + spec) * dotNL;
	}

	return color;
}

void main()
{
    vec3 color = texture(texSampler, fragTexCoord).rgb;

    //vec3 pointLight = calPointLight(color);
    //vec3 dirLight = calDirLight(color);
    
    float shadow = PCF(shadowMap, fragShadowCoord / fragShadowCoord.w, 10.0);

	vec3 N = normalize(fragNormal);
	vec3 V = normalize(fragViewPosition - fragPosition);
	vec3 R = reflect(-V, N);

	float metallic = fragMetallic;
	float roughness = fragRoughness;

	vec3 F0 = vec3(0.04);
	F0 = mix(F0, color, metallic);

	vec3 Lo = vec3(0.0);
	vec3 L = normalize(fragPointLightPosition - fragPosition);
	Lo += specularContribution(L, V, N, F0, metallic, roughness, color);

	vec2 brdf = texture(brdflutSampler, vec2(max(dot(N, V), 0.0) , roughness)).rg;
	vec3 reflection = prefilteredReflection(R, roughness).rgb;
	vec3 irradiance = texture(irradianceSampler, N).rgb;
	
	// diffuse
	vec3 diffuse = irradiance * color;

	vec3 F = F_SchlickR(max(dot(N, V),0.0), F0, roughness);

	// specular
	vec3 specular = reflection * (F * brdf.x + brdf.y);

	//ambient
	vec3 kD = 1.0 - F;
	kD *= 1.0 - metallic;
	vec3 ambient = (kD * diffuse + specular);

	// seems incorrect!
	vec3 finalColor = specular + ambient + Lo;

	// Tone mapping
	finalColor = Uncharted2Tonemap(finalColor * 4.5);
	finalColor = finalColor * (1.0f / Uncharted2Tonemap(vec3(11.2f)));	
	// Gamma correction
	finalColor = pow(finalColor, vec3(1.0f / 2.2));

	// apply shadow
	finalColor = finalColor * (shadow);

	// test for g-buffer
	vec3 normalColor = texture(normalSampler, fragTexCoord).rgb;

    // output
    outColor = vec4(finalColor, 1.0);
} 