#version 450

layout(binding = 0) uniform VertexUniformBufferObject
{
	mat4 model;
    mat4 view;
    mat4 proj;
    
    vec3 viewPosition;
    
    vec3 pointLightPosition;
    vec3 pointLightColor;
    float pointLightStrength;

    mat4 dirLightSpace;
    vec3 dirLightDirection;
    vec3 dirLightColor;
    float dirLightStrength;

    float metallic;
    float roughness;
} vubo;

layout(location = 0) in vec3 inPosition;
layout(location = 1) in vec3 inColor;
layout(location = 2) in vec2 inTexCoord;
layout(location = 3) in vec3 inNormal;

layout(location = 0) out vec3 fragColor;
layout(location = 1) out vec2 outUV;
layout(location = 2) out vec3 fragPosition;
layout(location = 3) out vec3 fragNormal;

layout(location = 4) out vec3 fragViewPosition;

layout(location = 5) out vec3 fragPointLightPosition;
layout(location = 6) out vec3 fragPointLightColor;
layout(location = 7) out float fragPointLightStrength;

layout(location = 8) out vec3 fragDirLightDirection;
layout(location = 9) out vec3 fragDirLightColor;
layout(location = 10) out float fragDirLightStrength;

layout(location = 11) out float fragMetallic;
layout(location = 12) out float fragRoughness;

layout(location = 13) out vec4 fragShadowCoord;

const mat4 biasMat = mat4(
    0.5, 0.0, 0.0, 0.0,
    0.0, 0.5, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.5, 0.5, 0.0, 1.0
);

void main()
{
    //gl_Position = vubo.proj * vubo.view * vubo.model * vec4(inPosition, 1.0);
    
    fragColor    = inColor;
    //fragTexCoord = inTexCoord;
    //fragTexCoord.t = 1.0 - inTexCoord.t;
    fragPosition = (vubo.model * vec4(inPosition, 1.0)).xyz ;
    fragNormal   = mat3(vubo.model) * inNormal;
    fragNormal.y = -fragNormal.y;

    fragViewPosition = vubo.viewPosition;

    fragPointLightPosition = vubo.pointLightPosition;
    fragPointLightColor = vubo.pointLightColor;
    fragPointLightStrength = vubo.pointLightStrength;

    fragDirLightDirection = vubo.dirLightDirection;
    fragDirLightColor = vubo.dirLightColor;
    fragDirLightStrength = vubo.dirLightStrength;

    fragMetallic = vubo.metallic;
    fragRoughness = vubo.roughness;

    fragShadowCoord = ( biasMat * vubo.dirLightSpace ) * vec4(inPosition, 1.0); 

    outUV = vec2((gl_VertexIndex << 1) & 2, gl_VertexIndex & 2);
	gl_Position = vec4(outUV * 2.0f - 1.0f, 0.0f, 1.0f);
}